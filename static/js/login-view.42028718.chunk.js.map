{"version":3,"sources":["components/Button/Button.module.scss","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/PageHeading/PageHeading.js","components/Button/Button.js","views/LoginView/LoginView.module.scss","views/LoginView/LoginView.js"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","PageHeading","text","defaultProps","Button","onLoadMore","contentBtn","disabled","onClick","className","styles","LoginView","dispatch","useDispatch","useState","email","setEmail","password","setPassword","isLoading","useSelector","authSelectors","getLoading","handleChange","target","name","onSubmit","e","preventDefault","trim","toast","warn","authOperations","logIn","Form","autoComplete","Label","LabelText","type","onChange","placeholder","Input","LoaderSpinner"],"mappings":"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","file":"static/js/login-view.42028718.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__2Bnys\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function PageHeading({ text }) {\n  return <h1>{text}</h1>;\n}\n\nPageHeading.defaultProps = {\n  text: '',\n};\n\nPageHeading.propTypes = {\n  text: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Button.module.scss';\n\nconst Button = ({ onLoadMore, contentBtn, disabled }) => (\n  <button disabled={disabled} onClick={onLoadMore} className={styles.Button}>\n    {contentBtn}\n  </button>\n);\n\nButton.defaultProps = {\n  onLoadMore: () => null,\n  disabled: false,\n};\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func,\n  contentBtn: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport default Button;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"LoginView_Form__3t_SP\",\"Label\":\"LoginView_Label__2I7u8\",\"LabelText\":\"LoginView_LabelText__2YrMT\",\"Input\":\"LoginView_Input__3HTMx\",\"Button\":\"LoginView_Button__3sDbb\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authOperations, authSelectors } from 'redux/auth';\n\nimport PageHeading from 'components/PageHeading';\nimport Button from 'components/Button';\nimport LoaderSpinner from 'components/LoaderSpinner';\nimport { toast } from 'react-toastify';\n\nimport styles from './LoginView.module.scss';\n\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const isLoading = useSelector(authSelectors.getLoading);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      (!email || e.target.email.value.trim() === '') &&\n      (!password || e.target.password.trim() === '')\n    ) {\n      toast.warn('Fill in the fields \"Email\" and \"Password\"');\n      return;\n    }\n\n    if (!email || e.target.email.value.trim() === '') {\n      toast.warn('Field \"Email\" is empty');\n      return;\n    }\n\n    if (!password || e.target.password.value.trim() === '') {\n      toast.warn('Enter your password');\n      return;\n    }\n\n    if (password.length < 8 || e.target.password.value.length < 8) {\n      toast.warn('Enter a password of 8 characters');\n      return;\n    }\n\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <div>\n      <PageHeading text=\"Login page\" />\n\n      <form onSubmit={handleSubmit} className={styles.Form} autoComplete=\"off\">\n        <label className={styles.Label}>\n          <span className={styles.LabelText}>Email</span>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={handleChange}\n            placeholder=\"Enter email\"\n            className={styles.Input}\n          />\n        </label>\n\n        <label className={styles.Label}>\n          <span className={styles.LabelText}>Password</span>\n          <input\n            type=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={handleChange}\n            placeholder=\"Enter password\"\n            className={styles.Input}\n            data-pass\n          />\n        </label>\n\n        <Button type=\"submit\" contentBtn=\"Log in\" />\n        {isLoading && <LoaderSpinner />}\n      </form>\n    </div>\n  );\n}\n"],"sourceRoot":""}